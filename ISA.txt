====CPU CONTROL INSTRUCTIONS====

INITCORE NUM,XXXX: Initialize CPU Core NUM and have it start running code from 16-bit address XXXX

INITCORE 0,XXXX -> 1111 1111 1111 0000 (XXXX)
INITCORE 1,XXXX -> 1111 1111 1111 0001 (XXXX)
INITCORE 2,XXXX -> 1111 1111 1111 0010 (XXXX)
INITCORE 3,XXXX -> 1111 1111 1111 0011 (XXXX)
INITCORE 4,XXXX -> 1111 1111 1111 0100 (XXXX)
INITCORE 5,XXXX -> 1111 1111 1111 0101 (XXXX)
INITCORE 6,XXXX -> 1111 1111 1111 0110 (XXXX)
INITCORE 7,XXXX -> 1111 1111 1111 0111 (XXXX)
INITCORE 8,XXXX -> 1111 1111 1111 1000 (XXXX)
INITCORE 9,XXXX -> 1111 1111 1111 1001 (XXXX)
INITCORE 10,XXXX -> 1111 1111 1111 1010 (XXXX)
INITCORE 11,XXXX -> 1111 1111 1111 1011 (XXXX)
INITCORE 12,XXXX -> 1111 1111 1111 1100 (XXXX)
INITCORE 13,XXXX -> 1111 1111 1111 1101 (XXXX)
INITCORE 14,XXXX -> 1111 1111 1111 1110 (XXXX)
INITCORE 15,XXXX -> 1111 1111 1111 1111 (XXXX)

====PERIPHERAL CONTROL INSTRUCTIONS====
SETLED SRCREG -> 0000 0000 0100 SRCREG
FUTURE_SETLED SRCREG -> 1000 0000 0100 SRCREG : Sets the LED to the value of SRCREG after the next clock cycle

====MOVING A 16-BIT LITERAL INTO A REGISTER====

MOV XXXX,R0 -> 0000 0000 0010 0000 (XXXX)
MOV XXXX,R1 -> 0000 0000 0010 0001 (XXXX)
MOV XXXX,R2 -> 0000 0000 0010 0010 (XXXX)
MOV XXXX,R3 -> 0000 0000 0010 0011 (XXXX)
MOV XXXX,R4 -> 0000 0000 0010 0100 (XXXX)
MOV XXXX,R5 -> 0000 0000 0010 0101 (XXXX)
MOV XXXX,R6 -> 0000 0000 0010 0110 (XXXX)
MOV XXXX,R7 -> 0000 0000 0010 0111 (XXXX)
MOV XXXX,R8 -> 0000 0000 0010 1000 (XXXX)
MOV XXXX,R9 -> 0000 0000 0010 1001 (XXXX)
MOV XXXX,R10 -> 0000 0000 0010 1010 (XXXX)
MOV XXXX,R11 -> 0000 0000 0010 1011 (XXXX)
MOV XXXX,R12 -> 0000 0000 0010 1100 (XXXX)
MOV XXXX,R13 -> 0000 0000 0010 1101 (XXXX)
MOV XXXX,R14 -> 0000 0000 0010 1110 (XXXX)
MOV XXXX,R15 -> 0000 0000 0010 1111 (XXXX)

====LOADING 16 BITS FROM MEMORY INTO A REGISTER====

LOAD XXXX,R0 -> 0000 0000 0001 0000 (XXXX)
LOAD XXXX,R1 -> 0000 0000 0001 0001 (XXXX)
LOAD XXXX,R2 -> 0000 0000 0001 0010 (XXXX)
LOAD XXXX,R3 -> 0000 0000 0001 0011 (XXXX)
LOAD XXXX,R4 -> 0000 0000 0001 0100 (XXXX)
LOAD XXXX,R5 -> 0000 0000 0001 0101 (XXXX)
LOAD XXXX,R6 -> 0000 0000 0001 0110 (XXXX)
LOAD XXXX,R7 -> 0000 0000 0001 0111 (XXXX)
LOAD XXXX,R8 -> 0000 0000 0001 1000 (XXXX)
LOAD XXXX,R9 -> 0000 0000 0001 1001 (XXXX)
LOAD XXXX,R10 -> 0000 0000 0001 1010 (XXXX)
LOAD XXXX,R11 -> 0000 0000 0001 1011 (XXXX)
LOAD XXXX,R12 -> 0000 0000 0001 1100 (XXXX)
LOAD XXXX,R13 -> 0000 0000 0001 1101 (XXXX)
LOAD XXXX,R14 -> 0000 0000 0001 1110 (XXXX)
LOAD XXXX,R15 -> 0000 0000 0001 1111 (XXXX)

====STORING 16 BITS IN MEMORY====

STO SRCREG,XXXX -> 0000 0000 0011 SRCREG (XXXX)

====TRANSFERRING THE CONTENTS OF ONE REGISTER INTO ANOTHER====

MOV SRCREG,DESTREG -> 0000 0001 SRCREG DESTREG

====ADDING/XORING/ANDING/ORING TWO REGISTERS AND STORING THE RESULT IN A THIRD====

SRC1: 3 bits
SRC2: 3 bits
DEST: 3 bits

ADD SRC1,SRC2,DEST -> 0000 001 SRC1 SRC2 DEST
XOR SRC1,SRC2,DEST -> 0000 010 SRC1 SRC2 DEST
AND SRC1,SRC2,DEST -> 0000 011 SRC1 SRC2 DEST
OR SRC1, SRC2, DEST -> 0000 100 SRC1 SRC2 DEST

====SHIFTING A REGISTER'S BITS BY A LITERAL====
SDREG: Source and destination register

SHR XXXX,SDREG -> 0000 1010 SDREG XXXX
SHL XXXX,SDREG -> 0000 1100 SDREG XXXX

====BRANCH INSTRUCTIONS====
JMP XXXX -> 0001 0000 0000 0000 (XXXX)
JNE SRC1, SRC2, XXXX -> 0001 0001 SRC1 SRC2 (XXXX)
JE SRC1, SRC2, XXXX -> 0001 0010 SRC1 SRC2 (XXXX)
JLE SRC1, SRC2, XXXX -> 0001 0011 SRC1 SRC2 (XXXX)
JGE SRC1, SRC2, XXXX -> 0001 0011 SRC2 SRC1 (XXXX) : JLE but with bitfields switched

